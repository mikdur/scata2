# Generated by Django 5.2.5 on 2025-08-13 19:10

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scata2', '0045_remove_scatajob_distance_remove_scatajob_downsample_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScataMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField(default=0.015, validators=[django.core.validators.MinValueValidator(0.001, 'Min 0.001'), django.core.validators.MaxValueValidator(0.1, 'Max 0.10')], verbose_name='Clustering distance 0.001 < x < 0.10')),
                ('min_alignment', models.FloatField(default=0.9, validators=[django.core.validators.MinValueValidator(0.5, 'Min 0.5'), django.core.validators.MaxValueValidator(1.0, 'Max 1')], verbose_name='Minimum alignment 0.5 < x < 1.0. Set to 1.0 to force global clustering (if all references are extracted amplicons)')),
                ('mismatch_pen', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(0, 'Min 0'), django.core.validators.MaxValueValidator(100, 'Max 100')], verbose_name='Mismatch penalty 0 < x < 100')),
                ('open_pen', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(0, 'Min 0'), django.core.validators.MaxValueValidator(100, 'Max 100')], verbose_name='Gap open penalty 0 < x < 100')),
                ('extend_pen', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, 'Min 0'), django.core.validators.MaxValueValidator(100, 'Max 100')], verbose_name='Gap extension penalty 0 < x < 100')),
                ('endgap_pen', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, 'Min 0'), django.core.validators.MaxValueValidator(100, 'Max 100')], verbose_name='End gap weight 0 < x < 100')),
                ('max_homopolymer', models.FloatField(default=3, validators=[django.core.validators.MinValueValidator(0, 'Min 0'), django.core.validators.MaxValueValidator(10, 'Max 10')], verbose_name='Collaps homopolymers longer than this. 0 to disable')),
                ('downsample', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, 'Min 0'), django.core.validators.MaxValueValidator(100000.0, 'Max 1e5')], verbose_name='Downsample samples with more than this number of reads to this number. 0 to disable.')),
                ('lowfreq', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, 'Min 0'), django.core.validators.MaxValueValidator(100, 'Max 100')], verbose_name='Remove global low frequency genotypes occuring less than this number of times.')),
            ],
        ),
        migrations.AddField(
            model_name='scatajob',
            name='method',
            field=models.CharField(choices=[('scata', 'Scata'), ('dummy', 'Dummy test method')], default='scata', max_length=10, verbose_name='Clustering method'),
        ),
        migrations.CreateModel(
            name='DummyMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dummy', models.CharField(choices=[('foo', 'Foo'), ('bar', 'Bar')], default='foo', verbose_name='Dummy setting')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scata2.scatajob')),
            ],
        ),
    ]
